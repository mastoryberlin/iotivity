require "./bindings"

module IoTivity

  # An IoTivity server.
  module Server

    # =========================================================================
    # Instance variables
    # =========================================================================

    @quit_server = false

    # =========================================================================
    # Methods
    # =========================================================================

    macro included

      # Sets up and runs the IoTivity server.
      def run_server(storage_dir)
        if storage_dir.is_a? Path
          storage_dir = storage_dir.to_s
        end

        # This is basically the Crystal translation of the C main() function
        # as it is generated by IoTivity's "gen.sh"

        # Allow Ctrl+C abortion but do proper cleanup
        Signal::INT.trap do
          @quit_server = true
        end

        puts "Set up an OCF Server for " + {{@type.stringify}} + "..."

        # intialize the variables
        puts "Initialize variables to defaults"
        Helper.initialize_variables

        # initialize the handlers structure
        handler = OC::Handler.new \
          init:               ->Helper.app_init,
          signal_event_loop:  ->{},
          register_resources: ->Helper.register_resources

        # #ifdef OC_SECURITY
        puts "Initialize Secure Resources\n"
        OC.storage_config storage_dir
        # #endif /* OC_SECURITY */

        # #ifdef OC_SECURITY
        # /* please comment out if the server:
        #   - have no display capabilities to display the PIN value
        #   - server does not require to implement RANDOM PIN (oic.sec.doxm.rdp) onboarding mechanism
        # */
        # oc_set_random_pin_callback(random_pin_cb, NULL);
        # #endif /* OC_SECURITY */

        OC.set_factory_presets_cb(->Helper.factory_presets_cb, nil)

        # start the stack
        init = OC.main_init(pointerof(handler))

        if init < 0
          puts "oc_main_init failed #{init}, exiting.\n"
          exit init;
        end

        puts "OCF server running, waiting on incoming connections.\n"

        # main loop
        until @quit_server
          OC.main_poll
          sleep 100.milliseconds
        end

        puts "Shutting down IoTivity..."
        OC.main_shutdown
      end
    end

    # --------------------------------------------------------------------------

    def stop_server
      @quit_server = true
    end

  end # module Server

end # module Mastory::IoT
